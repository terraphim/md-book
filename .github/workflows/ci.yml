name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run daily at 1 AM UTC
    - cron: '0 1 * * *'

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        include:
          # Test on nightly but allow failures
          - os: ubuntu-latest
            rust: nightly
            allow-failure: true
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow-failure || false }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-
            
      - name: Install Node.js for frontend tests
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package.json
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Check formatting
        if: matrix.rust == 'stable'
        run: cargo fmt --all -- --check
        
      - name: Run Clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run unit tests
        run: cargo test --lib --bins
        
      - name: Run integration tests
        run: cargo test --test integration
        continue-on-error: true  # Pagefind CLI might not be available in CI
        
      - name: Run end-to-end tests
        run: cargo test --test e2e
        env:
          RUST_LOG: debug
        continue-on-error: true  # Some E2E tests might need actual server
        
      - name: Run frontend tests
        run: npm test
        
      - name: Run benchmarks (stable only)
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo bench --no-run  # Don't actually run benchmarks in CI, just compile
        
      - name: Test documentation build
        if: matrix.rust == 'stable'
        run: cargo doc --no-deps --document-private-items
        
      - name: Check example builds
        run: |
          mkdir -p example_input
          echo "# Example\nThis is an example page." > example_input/index.md
          cargo run -- -i example_input -o example_output
        continue-on-error: true

  wasm:
    name: WebAssembly Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli
        
      - name: Build for WebAssembly
        run: cargo build --target wasm32-unknown-unknown --lib
        
      - name: Run WASM tests
        run: wasm-pack test --headless --chrome --firefox
        continue-on-error: true  # WASM tests might not work in CI environment

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install MSRV Rust toolchain
        uses: dtolnay/rust-toolchain@1.70.0  # Adjust based on actual MSRV
        
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check MSRV compilation
        run: cargo check --lib
        
      - name: Run MSRV tests
        run: cargo test --lib

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        
      - name: Install cargo-deny
        run: cargo install cargo-deny
        
      - name: Check licenses and security
        run: cargo deny check
        continue-on-error: true  # Allow to continue if deny.toml doesn't exist yet

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
        
      - name: Generate coverage report
        run: |
          cargo tarpaulin --out Xml --skip-clean
        continue-on-error: true
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  performance:
    name: Performance Regression
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run benchmarks
        run: cargo bench -- --output-format json | tee benchmark-results.json
        continue-on-error: true
        
      - name: Store benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build documentation
        run: |
          cargo doc --no-deps --document-private-items --all-features
          echo '<meta http-equiv="refresh" content="0; url=md_book">' > target/doc/index.html
          
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs